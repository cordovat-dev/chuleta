if no repos in config file, do an old-style update
for every repo in config file
	cd into repo
	if current branch is not master, then fail
	if master branch is not clean, then fail
	get the list of changes (only A and D) between since last save point (commit hash in config file)
	convert the list into a script of DMLs with an explicit transaction
	run DML script
	
	
git diff-tree --name-status -r HEAD~1..HEAD	


now we have to deal with duplicating paths in db
	answer: delete before insert
commit name or date?
	answer: usa tags instead
check if any DML was genereted (any changes found)
	answer: redirect to a temp file and check whether some change was found
manage if any repo is missing the last tag
	answer: catch error, suggest solutions and abort
manage if GIT_INTEGRATION but no LAST_GIT_TAG value in DB (this calls for a full update before starting using git integration)
	answer: call a full update and inform the user, update populate LAST_GIT_TAG (pending implementation)
create a function to delete all tags except the current one
	answer: done
show git related db settings in show config
add functionality to config repos from config file (pass values to db like BASE_DIR)
print before, processing and after also during git-based updates (b,a ready, but processing needs a little work
backup also on git-based updates
	answer: no change necessary
paths are duplicated when actually run
	answer: seems adding an unique constraint solved it, also no PK violation (somehow expected)!
write db changes to a log
do not backup if no change was made, in order to save space (or delete backup when no change)
not fail if working directory is not clean, perhaps just a warning
	answer: now it's just a warning
when should file-and-db-scoped variables be updated in the db? right now sqls.sh



